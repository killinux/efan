<?xml version="1.0" encoding="UTF-8" ?> 
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
<mapper namespace="com.efan.mybatis.persistence.UserMapper"> 
    <resultMap type="com.efan.mybatis.domain.UserInfo" id="UserInfo">  
        <id column="id" property="id" />  
        <result column="display_name" property="displayName" />  
        <result column="login_name" property="loginName" />  
        <result column="password" property="password" />  
        <result column="role" property="role" />  
        <result column="is_deleted" property="isDeleted" />  
        <result column="email" property="email" />  
        <result column="create_time" property="createTime" />  
        <result column="create_user" property="createUser" />  
        <result column="update_time" property="updateTime" />  
        <result column="update_user" property="updateUser" />  
    </resultMap> 
	
	<select id="countUserPagination" resultType="int">
		select
			count(*)
		from
			user
		where
			1 = 1 
		<if test="pagerForm.userListSearchIsDeleted > -1">
			and is_deleted = #{pagerForm.userListSearchIsDeleted} 
		</if>			
	</select>
	
	<select id="findAllUser" resultMap="UserInfo">
		select
			*
		from
			user
		where
			1 = 1 
		<if test="pagerForm.userListSearchIsDeleted > -1">
			and is_deleted = #{pagerForm.userListSearchIsDeleted} 
		</if>
		<if test="pagerForm.orderField != ''">
			order by #{pagerForm.orderField} #{pagerForm.orderDirection}
		</if>
		limit
			#{pagerForm.pageStart}, #{pagerForm.numPerPage}
	</select>
	
	<select id="getUserByLoginName" resultMap="UserInfo">
		select
			*
		from
			user
		where
			login_name = #{loginName}
	</select>
	
	<select id="getUserById" resultMap="UserInfo">
		select
			*
		from
			user
		where
			id = #{id}
	</select>
	
	<insert id="addUser">
		insert into user (
			display_name, login_name, password,
			role, email, create_user, create_time
		)
		values(
			#{userInfo.displayName}, #{userInfo.loginName}, #{userInfo.password},
			#{userInfo.role}, #{userInfo.email}, #{userInfo.createUser}, now()
		)
	</insert>
	
	<update id="updateUserById">
		update 
			user
		set
			display_name = #{userInfo.displayName},
			login_name = #{userInfo.loginName},
			role = #{userInfo.role},
			email = #{userInfo.email},
			is_deleted = #{userInfo.isDeleted},
			update_user = #{userInfo.updateUser},
			update_time = now()
		where
			id = #{userInfo.id}
	</update>
	
</mapper> 